Hey @Junkrat, welcome to Streamlit!

The st.button function returns True if the button was clicked by the user during the most recent run of your app. So to attach your function to the button, you could do this:

if st.button('add'):
    result = add(1, 2)
    st.write('result: %s' % result)


    Transpose dataframe
    https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.transpose.html


     
     
DATE_COLUMN = 'date/time'
DATA_URL = ('https://s3-us-west-2.amazonaws.com/'
            'streamlit-demo-data/uber-raw-data-sep14.csv.gz')

@st.cache
def load_data(nrows):
    data = pd.read_csv(DATA_URL, nrows=nrows)
    lowercase = lambda x: str(x).lower()
    data.rename(lowercase, axis='columns', inplace=True)
    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])
    return data

data_load_state = st.text('Loading data...')
data = load_data(10000)
data_load_state.text("Done! (using st.cache)")

if st.checkbox('Show raw data'):
    st.subheader('Raw data')
    st.write(data)

st.subheader('Number of pickups by hour')
hist_values = np.histogram(data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]
st.bar_chart(hist_values)

# Some number in the range 0-23
hour_to_filter = st.slider('hour', 0, 23, 17)
filtered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]

st.subheader('Map of all pickups at %s:00' % hour_to_filter)
st.map(filtered_data)


filter out zero matches by selecting matchcount>0
count all pivots
count all siblings


print pivot & match to table
print table
apply approve & metadata
push row to export_df

PROBLEM: Some pivots aren't tagged as pivots
Missing 

1.) get clustercount from CLUSTER_ID
2.) for each clustercount generate a clustertable
3.) 

1.) Get all matching rows and put them in matching table based on MATCH_ID
2.) Get all tables with MATCH_ID != CLUSTER_ID
3.) Get row where RECORD_ID == MATCH_ID
4.) Tag it as Pivot
5.) Add to prepped table.
6.) 

1.) get all pivots
2.) put them in a pivot table
3.) for each pivot, get all matching rows with same MATCH_ID
    and put them in a matches table.
4.) Compare pivot table to matches table by MATCH_ID.
5.) Join the pivot and matches to cluster table, 
    add that to main table.
6.) Repeat til all pivots are matched.
7.) Save master table.


